{
  "name": "nodeify",
  "version": "1.0.0",
  "description": "Convert promised code to use node style callbacks",
  "scripts": {
    "test": "mocha -R spec",
    "prepublish": "npm test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/then/nodeify.git"
  },
  "keywords": [
    "promise",
    "then",
    "nodeify",
    "callback"
  ],
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.8.1",
    "mocha-as-promised": "~1.2.1",
    "sinon": "~1.6.0"
  },
  "dependencies": {
    "promise": "~1.3.0",
    "is-promise": "~1.0.0"
  },
  "readme": "# Nodeify\r\n\r\n  Convert promised code to use node style callbacks.  If no callback is provided it will just return the original promise.\r\n\r\n## Installation\r\n\r\n  Server:\r\n\r\n    $ npm install nodeify\r\n\r\n## Usage\r\n\r\n### Functional\r\n\r\n  Call `nodeify` directly passing the `promise` and an optional `callback` as arguments.  If a `callback` is provided it will be called as `callback(error, result)`.  If `callback` is not a function, `promise` is returned.\r\n\r\n```javascript\r\nvar nodeify = require('nodeify');\r\n\r\nfunction myAsyncMethod(arg, callback) {\r\n  return nodeify(myPromiseMethod(arg), callback);\r\n}\r\n```\r\n\r\n### Constructor / Method\r\n\r\n  The `nodeify.Promise` constructor returns a promise with a `.nodeify` method which behaves just like the functional version above except that the first argument is implicitly `this`.\r\n\r\n```javascript\r\nvar Promise = require('nodeify').Promise;\r\n\r\nfunction myAsyncMethod(arg, callback) {\r\n  return new Promise(function (resolver) {\r\n    //do async work\r\n  })\r\n  .nodeify(callback);\r\n}\r\n```\r\n\r\n### Extend\r\n\r\n#### Extend(promise)\r\n\r\n  Takes a promise and extends it to support the `.nodeify` method.  It will still support the nodeify method after calls to `.then`.\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\nvar nodeify = require('nodeify');\r\n\r\nfunction myAsyncMethod(arg, callback) {\r\n  return nodeify.extend(myPromiseMethod(arg))\r\n    .nodeify(callback);\r\n}\r\n```\r\n\r\n#### Extend(PromiseConstructor)\r\n\r\n  Takes a PromiseConstructor and extends it to support the `.nodeify` method.\r\n\r\n```javascript\r\nvar PromiseConstructor = require('promise-constructor-used-by-my-promise-method');\r\n\r\nrequire('nodeify').extend(PromiseConstructor);\r\n\r\nfunction myAsyncMethod(arg, callback) {\r\n  return myPromiseMethod(arg).nodeify(callback);\r\n}\r\n```\r\n\r\n#### Extend()\r\n\r\n  Extends the default promise constructor (returned by calling `require('promise')`) and extends it to support `.nodeify`.\r\n\r\n```javascript\r\nrequire('nodeify').extend();\r\n\r\nfunction myAsyncMethod(arg, callback) {\r\n  //assuming myPromiseMethod uses `promise` as its promise library\r\n  return myPromiseMethod(arg).nodeify(callback);\r\n}\r\n```\r\n\r\n## Licence\r\n\r\n  MIT",
  "readmeFilename": "README.md",
  "_id": "nodeify@1.0.0",
  "dist": {
    "shasum": "2a106c7bfbd6b8490dd53c130ddbfe2ae639a856",
    "tarball": "http://registry.npmjs.org/nodeify/-/nodeify-1.0.0.tgz"
  },
  "_from": "nodeify@>=1.0.0 <2.0.0",
  "_npmVersion": "1.2.10",
  "_npmUser": {
    "name": "forbeslindesay",
    "email": "forbes@lindesay.co.uk"
  },
  "maintainers": [
    {
      "name": "forbeslindesay",
      "email": "forbes@lindesay.co.uk"
    }
  ],
  "directories": {},
  "_shasum": "2a106c7bfbd6b8490dd53c130ddbfe2ae639a856",
  "_resolved": "https://registry.npmjs.org/nodeify/-/nodeify-1.0.0.tgz"
}
